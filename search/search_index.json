{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation Guide","text":"<p>This folder contains the documentation for the project, built using MkDocs. <code>mkdocs</code> and all the required dependencies for building the docs are installed when you install this project with dev dependencies.</p> <p>Warning</p> <p>To make this work in your repo you will need to update your repo settings under <code>Settings/Pages/</code> so that docs are deployed from the<code>gh-pages</code> branch.</p> <p>Info</p> <p>If your docs aren't building in the GitHub action, you should make sure your Settings -&gt; Actions -&gt; Workflow permissions are set to read and write.</p>"},{"location":"#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Documentation is written in Markdown (<code>.md</code>) files.</li> <li>The main configuration file is <code>mkdocs.yml</code>, where you can define site settings, navigation structure, themes, and extensions.</li> <li>Place new documentation pages inside this <code>docs/</code> folder and link them in <code>mkdocs.yml</code>.</li> </ul> <p>You should update the <code>mkdocs.yml</code> file to change the name, icon and URL for your repository, instead of this one.</p>"},{"location":"#building-and-serving-the-docs-locally","title":"Building and Serving the Docs Locally","text":"<p>To preview the documentation locally, run:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>or</p> <pre><code>make serve\n</code></pre> <p>from the main project directory (one above <code>docs/</code>).</p> <p>This starts a local web server, typically at <code>http://127.0.0.1:8000/</code>, where you can view the documentation live.</p>"},{"location":"#deploying-the-docs","title":"Deploying the Docs","text":"<p>MkDocs is set up to deploy to GitHub Pages via a GitHub Action. On each push to <code>main</code>, the documentation will be built and published to the <code>gh-pages</code> branch.</p> <p>To manually deploy, run:</p> <pre><code>poetry run mkdocs gh-deploy --force\n</code></pre> <p>or</p> <pre><code>make deploy\n</code></pre> <p>This will build and push the site to GitHub Pages.</p>"},{"location":"#adding-code-documentation","title":"Adding Code Documentation","text":"<p>This project uses <code>mkdocstrings</code> to generate API documentation directly from the source code. To document Python functions and classes:</p> <ul> <li>Ensure docstrings follow a consistent format (NumPy-style is recommended).</li> <li>Use <code>packagename.module</code> syntax inside Markdown to auto-generate API docs.</li> </ul> <p>For more details, see the MkDocs documentation and the MkDocStrings plugin.</p>"},{"location":"#documenting-functions","title":"Documenting functions","text":"<p>You should add docstrings to your functions, and I recommend you use the <code>numpydoc</code> style for docstrings. You should fill out the sections as needed. In addition, I recommend you include type hints to help users understand your functions. This is the example function that is given in the package example module.</p> <pre><code>def example_function(\n    x: Union[int, float, npt.NDArray],\n) -&gt; Union[int, float, npt.NDArray]:\n    \"\"\"Squares the input value.\n\n    This function computes the square of a given number or NumPy array.\n\n    Parameters\n    ----------\n    x : int, float, or npt.NDArray\n        The input value(s) to be squared.\n\n    Returns\n    -------\n    result : int, float, or npt.NDArray\n        The squared result of `x`.\n\n    Raises\n    ------\n    TypeError\n        If `x` is not an int, float, or NumPy array.\n\n    Notes\n    -----\n    This function uses `np.square(x)`, which is optimized for NumPy arrays.\n\n    Examples\n    --------\n    Square an integer:\n    &gt;&gt;&gt; example_function(3)\n    9\n\n    Square a float:\n    &gt;&gt;&gt; example_function(2.5)\n    6.25\n\n    Square a NumPy array:\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; arr = np.array([1, 2, 3])\n    &gt;&gt;&gt; example_function(arr)\n    array([1, 4, 9])\n\n    See Also\n    --------\n    numpy.square : Equivalent NumPy function for squaring elements.\n\n    References\n    ----------\n    .. [1] NumPy Documentation: https://numpy.org/doc/stable/reference/generated/numpy.square.html\n    \"\"\"\n    if not isinstance(x, (int, float, np.ndarray)):\n        raise TypeError(\"Input must be an int, float, or NumPy array.\")\n\n    return np.square(x)\n</code></pre>"},{"location":"apidocs/","title":"API Documentation","text":"<p>This file generates API reference documentation using <code>mkdocstrings</code> for the package contained in this repository. It is a simple starting point \u2014 update the entries below to document the modules you care about.</p> <p>shortschedule - Science Calendar Processing and Scheduling</p>"},{"location":"apidocs/#shortschedule.ObservationSequence","title":"<code>ObservationSequence</code>","text":"<p>Represents an observation sequence within a visit.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.duration","title":"<code>duration</code>  <code>property</code>","text":"<p>Return the sequence duration as an Astropy TimeDelta.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.duration--returns","title":"Returns","text":"<p>astropy.time.TimeDelta     TimeDelta representing stop_time - start_time. The caller can     convert to seconds/minutes/hours via <code>.sec</code> or astropy unit methods.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.start_time_str","title":"<code>start_time_str</code>  <code>property</code>","text":"<p>Format start time as ISO string with Z suffix.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.stop_time_str","title":"<code>stop_time_str</code>  <code>property</code>","text":"<p>Format stop time as ISO string with Z suffix.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.copy","title":"<code>copy()</code>","text":"<p>Create a deep copy of this observation sequence.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.get_all_payload_parameters","title":"<code>get_all_payload_parameters()</code>","text":"<p>Return all payload parameters as a nested dictionary.</p> <p>The returned structure converts XML elements into Python-native types (strings, dicts, lists) making it easier to inspect payload values in tests and analysis code.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.get_flat_payload_parameters","title":"<code>get_flat_payload_parameters()</code>","text":"<p>Return a flattened mapping of payload parameters.</p> <p>Keys use dot-notation to represent nesting (e.g. 'AcquireVisCamScienceData.ExposureTime_us'). Attributes are represented using the '@' prefix (e.g. 'Payload.@attr').</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.get_nested_payload_parameter","title":"<code>get_nested_payload_parameter(category, parameter_name, sub_parameter_name, default=None)</code>","text":"<p>Get nested payload parameter value.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.get_payload_parameter","title":"<code>get_payload_parameter(category, parameter_name, default=None)</code>","text":"<p>Retrieve a payload parameter from the stored XML payload element.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.get_payload_parameter--parameters","title":"Parameters","text":"<p>category : str     Top-level payload category name (e.g. 'AcquireVisCamScienceData'). parameter_name : str     Child element name to retrieve under the category element. default : any, optional     Value to return if the parameter or category is not present.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.get_payload_parameter--returns","title":"Returns","text":"<p>str or dict or None     - If the element is a leaf with text, a stripped string is returned.     - If the element has children, a dict mapping child tag -&gt; value is returned.     - If missing, <code>default</code> is returned.</p>"},{"location":"apidocs/#shortschedule.ObservationSequence.set_payload_parameter","title":"<code>set_payload_parameter(category, parameter_name, value)</code>","text":"<p>Set payload parameter value in XML structure.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor","title":"<code>ScheduleProcessor</code>","text":"<p>Main class for processing and adjusting science calendars with updated TLE.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor--public-methods","title":"Public methods","text":"<ul> <li>process_calendar(calendar, window_start=None, window_duration_days=21, verbose=False)     Process a calendar and return an updated ScienceCalendar.</li> <li>get_gap_report()     Return a structured report summarizing visibility gaps and actions taken.</li> </ul> <p>The class expects <code>Visibility(tle1, tle2)</code> to offer <code>get_visibility(coord, times)</code> returning a boolean array of the same length as <code>times</code>.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.debug_sequence_visibility","title":"<code>debug_sequence_visibility(calendar, sequence_id, target_name=None)</code>","text":"<p>Debug visibility for a specific sequence.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.get_gap_report","title":"<code>get_gap_report()</code>","text":"<p>Return comprehensive gap analysis report.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.get_minute_by_minute_assignments","title":"<code>get_minute_by_minute_assignments(calendar)</code>","text":"<p>Generate assignments using synchronized time grid.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.print_gap_summary","title":"<code>print_gap_summary()</code>","text":"<p>Print a human-readable summary of gap analysis.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.print_timing_summary","title":"<code>print_timing_summary(calendar)</code>","text":"<p>Print a quick timing summary.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.process_calendar","title":"<code>process_calendar(calendar, window_start=None, window_duration_days=21, verbose=False)</code>","text":"<p>Process a <code>ScienceCalendar</code> and return an updated calendar.</p> <p>The processor performs a time-window extraction, computes minute-by-minute visibility using the configured TLEs, identifies visibility gaps, attempts to fill gaps by extending previous sequences (and shrinking following sequences), updates payload integration parameters, and produces a <code>gap_report</code> summary.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.process_calendar--side-effects","title":"Side effects","text":"<ul> <li>The returned <code>ScienceCalendar</code> will have its <code>.metadata</code> updated   to include the TLE lines, a <code>processed_datetime</code> and the   generated <code>gap_report</code> to aid downstream writing and analysis.</li> </ul>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.process_calendar--parameters","title":"Parameters","text":"<p>calendar : ScienceCalendar     Input calendar to process. window_start : str or astropy.time.Time, optional     ISO string or Time object indicating the window start. window_duration_days : int, optional     Number of days to include in the processing window. verbose : bool, optional     Print diagnostics when True.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.process_calendar--returns","title":"Returns","text":"<p>ScienceCalendar     Processed calendar with updated sequences and metadata.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.validate_no_overlaps_astropy","title":"<code>validate_no_overlaps_astropy(calendar, report_issues=True)</code>","text":"<p>Use Astropy's time comparison with proper tolerance.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.validate_payload_exposures","title":"<code>validate_payload_exposures(calendar, report_issues=True)</code>","text":"<p>Validate that payload exposure times (single exposure and total requested exposure) do not exceed the enclosing sequence duration.</p> <p>This currently checks the common VIS camera payload category <code>AcquireVisCamScienceData</code> for keys:   - <code>ExposureTime_us</code> (microseconds per frame)   - <code>NumTotalFramesRequested</code> (total frames)   - <code>FramesPerCoadd</code> (used when NumTotalFramesRequested is not present)</p> <p>It also heuristically scans flattened payload parameters for any key containing the string <code>exposure</code> and checks single-exposure values against the sequence duration (assumes microseconds when the key ends with <code>_us</code>).</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.validate_payload_exposures--returns","title":"Returns","text":"<p>list     A list of issue dicts found. Empty list if none.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.validate_sequence_timing","title":"<code>validate_sequence_timing(calendar, report_issues=True)</code>","text":"<p>Comprehensive timing validation including overlaps, gaps, and minimum durations.</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.validate_sequence_timing--returns","title":"Returns","text":"<p>dict     Dictionary with different types of timing issues</p>"},{"location":"apidocs/#shortschedule.ScheduleProcessor.validate_visibility","title":"<code>validate_visibility(calendar, report_issues=True)</code>","text":"<p>Validate that all sequences have good visibility.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar","title":"<code>ScienceCalendar</code>","text":"<p>Represents a complete Science Calendar.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.calendar_span","title":"<code>calendar_span</code>  <code>property</code>","text":"<p>Total span of the calendar from first to last observation.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.calendar_span_days","title":"<code>calendar_span_days</code>  <code>property</code>","text":"<p>Total span of the calendar from first to last observation in days.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.date_range","title":"<code>date_range</code>  <code>property</code>","text":"<p>Start and end dates of the calendar.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.duty_cycle_percent","title":"<code>duty_cycle_percent</code>  <code>property</code>","text":"<p>Percentage of calendar span that is actually observing.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.priority_breakdown","title":"<code>priority_breakdown</code>  <code>property</code>","text":"<p>Breakdown of sequences by priority level.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.total_duration","title":"<code>total_duration</code>  <code>property</code>","text":"<p>Total duration of all observations in minutes.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.total_duration_days","title":"<code>total_duration_days</code>  <code>property</code>","text":"<p>Total duration of all observations in days.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.total_duration_hours","title":"<code>total_duration_hours</code>  <code>property</code>","text":"<p>Total duration of all observations in hours.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.total_duration_minutes","title":"<code>total_duration_minutes</code>  <code>property</code>","text":"<p>Total duration of all observations in minutes.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.total_sequences","title":"<code>total_sequences</code>  <code>property</code>","text":"<p>Total number of observation sequences.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.copy","title":"<code>copy()</code>","text":"<p>Create a complete deep copy of this calendar.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.get_sequence","title":"<code>get_sequence(visit_id, sequence_id)</code>","text":"<p>Get observation sequence by visit ID and sequence ID.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.get_summary_stats","title":"<code>get_summary_stats()</code>","text":"<p>Get comprehensive summary statistics.</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.replace_sequence","title":"<code>replace_sequence(visit_id, sequence_id, new_sequence)</code>","text":"<p>Replace an existing sequence with a new one.</p> <p>Parameters:</p> Name Type Description Default <code>visit_id</code> <code>str</code> <p>ID of the visit containing the sequence</p> required <code>sequence_id</code> <code>str</code> <p>ID of the sequence to replace</p> required <code>new_sequence</code> <code>ObservationSequence</code> <p>New ObservationSequence object to replace with</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if replacement was successful, False if sequence not found</p>"},{"location":"apidocs/#shortschedule.ScienceCalendar.set_visibility_calculator","title":"<code>set_visibility_calculator(visibility)</code>","text":"<p>Set or update the visibility calculator.</p>"},{"location":"apidocs/#shortschedule.Visit","title":"<code>Visit</code>","text":"<p>Represents a visit in the science calendar.</p>"},{"location":"apidocs/#shortschedule.Visit.end_time","title":"<code>end_time</code>  <code>property</code>","text":"<p>End time of the last sequence in this visit.</p>"},{"location":"apidocs/#shortschedule.Visit.start_time","title":"<code>start_time</code>  <code>property</code>","text":"<p>Start time of the first sequence in this visit.</p>"},{"location":"apidocs/#shortschedule.Visit.total_duration","title":"<code>total_duration</code>  <code>property</code>","text":"<p>Total duration of all sequences in this visit.</p>"},{"location":"apidocs/#shortschedule.Visit.total_duration_minutes","title":"<code>total_duration_minutes</code>  <code>property</code>","text":"<p>Total duration of all sequences in this visit (minutes).</p>"},{"location":"apidocs/#shortschedule.Visit.copy","title":"<code>copy(sequences=None)</code>","text":"<p>Create a copy of this visit, optionally with different sequences.</p>"},{"location":"apidocs/#shortschedule.XMLWriter","title":"<code>XMLWriter</code>","text":"<p>Class for writing processed science calendars back to XML format.</p> <p>The writer provides <code>write_calendar(calendar, output_path=None, ...)</code> which either writes to the provided <code>output_path</code> or generates a filename using the PAN naming convention.</p>"},{"location":"apidocs/#shortschedule.XMLWriter.write_calendar","title":"<code>write_calendar(calendar, output_path=None, mission_phase='TST', revision=1, verbose=False)</code>","text":"<p>Write science calendar to XML file with proper naming convention.</p>"},{"location":"apidocs/#shortschedule.XMLWriter.write_calendar--parameters","title":"Parameters:","text":"<p>calendar : ScienceCalendar     Calendar to write output_path : str, optional     Full output path. If None, generates filename automatically mission_phase : str     Mission phase code: 'TST', 'COM', or 'OPS' (default: 'TST') revision : int     Revision number (default: 1) verbose : bool     Print writing details</p>"},{"location":"apidocs/#shortschedule.XMLWriter.write_calendar--returns","title":"Returns:","text":"<p>str     Path to written file</p>"},{"location":"apidocs/#shortschedule.get_version","title":"<code>get_version()</code>","text":"<p>Get package version.</p>"},{"location":"apidocs/#shortschedule.parse_science_calendar","title":"<code>parse_science_calendar(xml_path, verbose=False)</code>","text":"<p>Parse a PAN-SCICAL Science Calendar XML file into a <code>ScienceCalendar</code> object.</p>"},{"location":"apidocs/#shortschedule.parse_science_calendar--parameters","title":"Parameters","text":"<p>xml_path : str     Path to the PAN-SCICAL XML file. verbose : bool, optional     If True, print progress messages.</p>"},{"location":"apidocs/#shortschedule.parse_science_calendar--returns","title":"Returns","text":"<p>ScienceCalendar     In-memory representation of the calendar with visits and observation     sequences. Payload parameter XML fragments are preserved as     ElementTree elements under each sequence.</p>"},{"location":"apidocs/#shortschedule.parse_science_calendar--notes","title":"Notes","text":"<p>The parser tolerates missing optional sections and returns an empty <code>ScienceCalendar</code> when no visits are found. It uses the namespace '/pandora/calendar/' expected in PAN-SCICAL files.</p>"},{"location":"apidocs/#shortschedule.setup_logging","title":"<code>setup_logging(level=logging.INFO)</code>","text":"<p>Setup basic logging configuration.</p>"},{"location":"apidocs/#shortschedule.setup_logging--parameters","title":"Parameters:","text":"<p>level : int     Logging level (default: logging.INFO)</p>"},{"location":"notebook-example/","title":"Example using the short calendar generation","text":"<p>You can create notebooks to show how to use your package. These will be automatically compiled and run by <code>mkdocs</code>, depending on the settings in your <code>mkdocs.yml</code> file.</p> In\u00a0[1]: Copied! <pre>from shortschedule import ScheduleProcessor, XMLWriter\nfrom shortschedule import ScienceCalendar, Visit, ObservationSequence\nfrom shortschedule import parse_science_calendar\nfrom shortschedule.visualizer import ScheduleVisualizer\n\nfrom astropy.time import Time\n</pre> from shortschedule import ScheduleProcessor, XMLWriter from shortschedule import ScienceCalendar, Visit, ObservationSequence from shortschedule import parse_science_calendar from shortschedule.visualizer import ScheduleVisualizer  from astropy.time import Time In\u00a0[2]: Copied! <pre># this is an example XML file that lasts for 7 days\nxml_file_path = \"../src/shortschedule/data/Pandora_science_calendar_20251018_tsb-futz.xml\"\n</pre> # this is an example XML file that lasts for 7 days xml_file_path = \"../src/shortschedule/data/Pandora_science_calendar_20251018_tsb-futz.xml\" In\u00a0[3]: Copied! <pre># set a start date for the new calendar and duration\nwindow_start = Time(\"2026-02-06T17:42:00Z\")\nwindow_duration_days = 3\n\n# parse the long term calendar XML file\noriginal_calendar = parse_science_calendar(xml_file_path, verbose=True)\n\n\n# save the original TLE here for testing\n# the new TLE has a slightly different number of orbits per day\noriginal_tle1 = \"1 99152U 26011B  26005.66013674 +.00000000 +00000-0 +00000-0 0   16\"\noriginal_tle2 = \"2 99152 97.6750 17.6690 0000000 328.8990 20.9640 14.86530781000004\"\n\nnew_tle1 = \"1 99152U 26011B  26005.66013674 +.00000000 +00000-0 +00000-0 0   16\"\nnew_tle2 = \"2 99152 97.6750 17.6690 0000000 328.8990 20.9640 14.865\"\n\n# initialize the ScheduleProcessor object\nscheduler = ScheduleProcessor(original_tle1, original_tle2)\n</pre> # set a start date for the new calendar and duration window_start = Time(\"2026-02-06T17:42:00Z\") window_duration_days = 3  # parse the long term calendar XML file original_calendar = parse_science_calendar(xml_file_path, verbose=True)   # save the original TLE here for testing # the new TLE has a slightly different number of orbits per day original_tle1 = \"1 99152U 26011B  26005.66013674 +.00000000 +00000-0 +00000-0 0   16\" original_tle2 = \"2 99152 97.6750 17.6690 0000000 328.8990 20.9640 14.86530781000004\"  new_tle1 = \"1 99152U 26011B  26005.66013674 +.00000000 +00000-0 +00000-0 0   16\" new_tle2 = \"2 99152 97.6750 17.6690 0000000 328.8990 20.9640 14.865\"  # initialize the ScheduleProcessor object scheduler = ScheduleProcessor(original_tle1, original_tle2) <pre>Parsing XML file: ../src/shortschedule/data/Pandora_science_calendar_20251018_tsb-futz.xml\nRoot tag: {/pandora/calendar/}ScienceCalendar\nCalendar valid from 2026-02-05 00:00:00 to 2027-02-04 09:47:00\nFound 10 visits\nSuccessfully parsed 10 visits with 313 total sequences\n</pre> In\u00a0[4]: Copied! <pre># create the new calendar\n\nprocessed_calendar = scheduler.process_calendar(original_calendar,\n                           window_start=window_start,\n                           window_duration_days = window_duration_days\n                           )\n</pre> # create the new calendar  processed_calendar = scheduler.process_calendar(original_calendar,                            window_start=window_start,                            window_duration_days = window_duration_days                            ) In\u00a0[5]: Copied! <pre># these tests are performed internally but we can also run them explicitly\nissues = scheduler.validate_visibility(processed_calendar)\nprint('visibility issues:', issues)\n\nissues = scheduler.validate_payload_exposures(processed_calendar, report_issues=True)\nprint('exposure issues:', issues)\n\n# Quick overlap check (like validate_visibility)\noverlap_issues = scheduler.validate_no_overlaps_astropy(processed_calendar)\nprint(f\"Found {len(overlap_issues)} overlaps\")\n\n# Comprehensive timing validation\nall_timing_issues = scheduler.validate_sequence_timing(processed_calendar)\n\n# Quick summary\nscheduler.print_timing_summary(processed_calendar)\n\nscheduler.print_gap_summary()\n</pre> # these tests are performed internally but we can also run them explicitly issues = scheduler.validate_visibility(processed_calendar) print('visibility issues:', issues)  issues = scheduler.validate_payload_exposures(processed_calendar, report_issues=True) print('exposure issues:', issues)  # Quick overlap check (like validate_visibility) overlap_issues = scheduler.validate_no_overlaps_astropy(processed_calendar) print(f\"Found {len(overlap_issues)} overlaps\")  # Comprehensive timing validation all_timing_issues = scheduler.validate_sequence_timing(processed_calendar)  # Quick summary scheduler.print_timing_summary(processed_calendar)  scheduler.print_gap_summary()  <pre>visibility issues: []\nexposure issues: []\nFound 0 overlaps\n\n============================================================\nSEQUENCE TIMING VALIDATION REPORT\n============================================================\nTotal sequences analyzed: 138\nTotal timing issues found: 0\n\n\u2713 OVERLAPS: None found\n\n\u2713 SHORT SEQUENCES: None found\n\n\u2713 LARGE GAPS: None found\n\u2713 All sequence timing validation checks passed\n\n============================================================\nVISIBILITY GAP ANALYSIS SUMMARY\n============================================================\n\nORIGINAL CALENDAR:\n  Total Sequences: 138\n  Total Duration: 70.7 hours\n  Duty Cycle: 98.1%\n\nPROCESSED CALENDAR:\n  Total Sequences: 138\n  Total Duration: 72.0 hours\n  Duty Cycle: 100.0%\n\nIMPROVEMENTS:\n  Duration Gained: 1.4 hours\n  Duty Cycle Improved: 1.9%\n  Sequences Modified: 0\n  Gaps Filled: 35/35\n</pre> In\u00a0[6]: Copied! <pre>processed_calendar.get_summary_stats()\n</pre> processed_calendar.get_summary_stats() Out[6]: <pre>{'total_visits': 5,\n 'total_sequences': np.int64(138),\n 'total_duration_minutes': np.float64(4323.0),\n 'total_duration_hours': np.float64(72.05),\n 'total_duration_days': np.float64(3.002083333333333),\n 'calendar_span_days': np.float64(3.002083333333333),\n 'duty_cycle_percent': np.float64(100.0),\n 'start_date': '2026-02-06T17:57:00.000',\n 'end_date': '2026-02-09T18:00:00.000',\n 'priority_breakdown': {'priority_0': {'count': 106,\n   'duration_hours': np.float64(45.43333333333332),\n   'duration_days': np.float64(1.8930555555555553)},\n  'priority_1': {'count': 27,\n   'duration_hours': np.float64(22.31666666666668),\n   'duration_days': np.float64(0.9298611111111117)},\n  'priority_2': {'count': 5,\n   'duration_hours': np.float64(4.300000000000001),\n   'duration_days': np.float64(0.1791666666666667)}}}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre># we can write the output file\nXMLWriter().write_calendar(processed_calendar, )\n</pre> # we can write the output file XMLWriter().write_calendar(processed_calendar, ) Out[7]: <pre>'PAN-SCICAL-TST-20251025-VF-20260206-EX-20260209-R001.xml'</pre> In\u00a0[8]: Copied! <pre># show some example figures\nvisualizer = ScheduleVisualizer(scheduler)\npriority_fig = visualizer.plot_gantt_timeline_by_priority(\n    processed_calendar,\n    figsize=(12, 6),  # Smaller size\n    show_sequence_labels=False,\n    title=\"Schedule by Priority\"\n)\n</pre> # show some example figures visualizer = ScheduleVisualizer(scheduler) priority_fig = visualizer.plot_gantt_timeline_by_priority(     processed_calendar,     figsize=(12, 6),  # Smaller size     show_sequence_labels=False,     title=\"Schedule by Priority\" ) <pre>/Users/tsbarcl2/gitcode/pandora-short-term-scheduler/src/shortschedule/visualizer.py:1299: UserWarning: 'set_params()' not defined for locator of type &lt;class 'matplotlib.dates.DayLocator'&gt;\n  ax.locator_params(axis='x', nbins=10)\n</pre> In\u00a0[9]: Copied! <pre># we can compare before and after\n\nwindowed_original = scheduler._extract_time_window(\n    original_calendar,\n    window_start=window_start,\n    window_duration_days=window_duration_days,\n    verbose=False\n)\n\ngantt_fig, visit_fig, summary_fig, comparison_df = visualizer.generate_full_report(\n    windowed_original, \n    processed_calendar,\n    save_path=\"schedule_analysis\",\n    show_sequence_labels=False,  # Clean look without sequence IDs\n    processed_only=False          # Only show processed calendar\n)\n</pre> # we can compare before and after  windowed_original = scheduler._extract_time_window(     original_calendar,     window_start=window_start,     window_duration_days=window_duration_days,     verbose=False )  gantt_fig, visit_fig, summary_fig, comparison_df = visualizer.generate_full_report(     windowed_original,      processed_calendar,     save_path=\"schedule_analysis\",     show_sequence_labels=False,  # Clean look without sequence IDs     processed_only=False          # Only show processed calendar ) <pre>Plots and data saved to schedule_analysis_*\n</pre> In\u00a0[10]: Copied! <pre># there are a lot of helper functions\n\nprocessed_calendar.visits[0].sequences[0].get_all_payload_parameters()\n</pre> # there are a lot of helper functions  processed_calendar.visits[0].sequences[0].get_all_payload_parameters() Out[10]: <pre>{'AcquireInfCamImages': {'AverageGroups': '1',\n  'ROI_StartX': '1968',\n  'ROI_StartY': '824',\n  'ROI_SizeX': '80',\n  'ROI_SizeY': '400',\n  'RiceX': '4',\n  'RiceY': '28',\n  'SaveImagesToDisk': '1',\n  'SendThumbnails': '1',\n  'ThumbnailBinSize': '1',\n  'ThumbnailCompressionType': '1',\n  'TargetID': 'HD_73583b',\n  'SC_Resets1': '1',\n  'SC_Resets2': '1',\n  'SC_DropFrames1': '0',\n  'SC_DropFrames2': '16',\n  'SC_DropFrames3': '0',\n  'SC_ReadFrames': '4',\n  'SC_Groups': '6',\n  'SC_Integrations': '16'},\n 'AcquireVisCamScienceData': {'IncludeFieldSolnsInResp': '1',\n  'ROI_StartX': '512',\n  'ROI_StartY': '512',\n  'ROI_SizeX': '1024',\n  'ROI_SizeY': '1024',\n  'MaxMagnitudeInQuadCatalog': '15.5',\n  'SaveImagesToDisk': '1',\n  'RiceX': '5',\n  'RiceY': '25',\n  'SendThumbnails': '0',\n  'TargetID': 'HD_73583b',\n  'TargetRA': '129.6881136741847',\n  'TargetDEC': '-13.25641580228208',\n  'StarRoiDetMethod': '1',\n  'numPredefinedStarRois': '9',\n  'PredefinedStarRoiRa': {'RA1': '129.688293',\n   'RA2': '129.658719',\n   'RA3': '129.598273',\n   'RA4': '129.679093',\n   'RA5': '129.791551',\n   'RA6': '129.604661',\n   'RA7': '129.685432',\n   'RA8': '129.651233',\n   'RA9': '129.675732'},\n  'PredefinedStarRoiDec': {'Dec1': '-13.256521',\n   'Dec2': '-13.294532',\n   'Dec3': '-13.353466',\n   'Dec4': '-13.300072',\n   'Dec5': '-13.311467',\n   'Dec6': '-13.361574',\n   'Dec7': '-13.233273',\n   'Dec8': '-13.462517',\n   'Dec9': '-13.240165'},\n  'FramesPerCoadd': '50',\n  'ExposureTime_us': '200000',\n  'MaxNumStarRois': '0',\n  'StarRoiDimension': '50',\n  'NumTotalFramesRequested': '3250'}}</pre> In\u00a0[11]: Copied! <pre>fig, ax = visualizer.plot_timeline(processed_calendar, show_visits=True)\n</pre> fig, ax = visualizer.plot_timeline(processed_calendar, show_visits=True) In\u00a0[12]: Copied! <pre>fig, ax = visualizer.plot_target_time(processed_calendar)\n</pre> fig, ax = visualizer.plot_target_time(processed_calendar) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebook-example/#example-using-the-short-calendar-generation","title":"Example using the short calendar generation\u00b6","text":""}]}